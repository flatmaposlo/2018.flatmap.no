- page_name:
    "pretty"
  speakers:
  -
    name:
      "Jon Pretty"
    bio:
      "<p>Jon (@propensive) has been having fun riding the bleeding edge of
      Scala for over a decade, and he's not done yet. While he's not
      travelling the world attending Scala conferences, or organizing his
      own (Scala World), Jon spends his time working on the open-source
      Rapture libraries. He is principal engineer at The Scala Center.</p>"
    image:
      "pretty.png"
    twitter_handle:
      "@propensive"
    twitter_link:
      "https://twitter.com/propensive"
  title:
    "Contextual: Statically-checked Interpolated Strings for Everyone!"
  type:
    "Presentation"
  abstract:
    '<p>Interpolated strings, like the familiar `s""`, provide a convenient way to embed external DSLs in Scala source, allowing you to construct a new value at runtime from a string literal, with Scala expressions substituted within it.</p>

    <p>But unless you are prepared to implement the interpolator using a macro, the compiler provides no checks on the correctness or well-formedness of the embedded DSL.</p>

    <p>Contextual is a small open-source library which does the heavy lifting work to make it trivial to write string interpolators which run at compile time, without requiring any macro code. A string interpolator which parses and checks a DSL at compile-time -- with its own custom error-messages -- can be written using contextual in just a few lines of ordinary "userspace" code, calling upon parsers, regular expressions or any other means to check the interpolated string.</p>

    <p>This opens up a smorgasbord of possibilities for adding more compile-time safety to Scala code, not least the ability to introduce your own literal-like types, ranging from checked email addresses or URLs to compile-time-parsed YAML, CSS or GraphQL.</p>'


- page_name:
    "olchovy"
  title:
    "sbt: Beyond the Build Tool"
  type:
    "Workshop"
  abstract:
    "<p>Anyone familiar with Scala knows both the benefits and annoyances of using sbt. On one hand,
    the tool is essential for features such as dependency management, continuous compilation, testing,
    and deployment, etc. However, itâ€™s often that we find hours are wasted on trying to fight sbt and
    the way it dictates our build processes. In this workshop, Jeff will show fellow Scala developers
    how to regain their productivity by embracing sbt instead of fighting it, as well as finding new
    ways to leverage sbt beyond its build tool moniker. Participants of this workshop will walk away
    with a greater understanding of sbt's fundamental concepts by authoring custom sbt tasks and plugins.
    Specific focus will be placed on creating plugins for application deployment and execution.</p>"
  speakers:
  -
    name:
      "Jeff Olchovy"
    bio:
      "<p>Jeff Olchovy is a Principal Software Engineer at Tapad where he leads the company's Platform
      Practice -- the cross-functional engineering group responsible for laying the foundation of Tapad's
      software systems. With over nine years of development experience, Jeff has played a critical role
      in building Tapad's engineering team. Jeff was recently appointed to help spearhead Tapad's
      engineering efforts at the company's new Oslo offic</p>"
    image:
      "olchovy.png"
    twitter_handle:
      "@TapadEng"
    twitter_link:
      "https://twitter.com/TapadEng"

