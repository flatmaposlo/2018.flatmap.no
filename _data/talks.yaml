- page_name:
    "wickstrom"
  speakers:
  -
    name:
      "Oskar Wickström"
    bio:
      "<p>After some years of musical education, Oskar Wickström began his journey into the
      world of software. He’s currently doing remote work in Haskell, and in his spare time
      he creates screencasts at haskell-at-work.com. Among the technical topics that interest
      Oskar are functional programming, systems design, web technology, and programming languages.
      His more aesthetic side, which mostly involves music, draws him towards graphics and UI
      design every now and then. .</p>"
    image:
      "oskar_wickstrom.jpg"
    twitter:
      "owickstrom"
  title:
    "Domain Modelling with Haskell Data Structures"
  type:
    "Workshop"
  abstract:
    '<p>Haskell is an amazing language for domain modelling, with its expressive data types and highly
    reusable abstractions. In this workshop we will design the core of a simple project management system,
    and explore different ways of traversing and folding our data when implementing new features.</p>'
  description:
    '<p>We will use Haskell data structures to model a project management system, and from there explore
    Functor, Foldable, Traversable, and maybe recursion schemes if we have time. Attendees should be
    comfortable with Haskell basics, preferably at the level of
    <a href="http://haskellbook.com/">Haskell programming from first principles</a>
    or similar. We will use the Stack build tool to keep it consistent, and that should be installed
    beforehand, together with at least a basic text editor, by all attendees.</p>'


- page_name:
    "hauck"
  title:
    "Free All The Things!"
  type:
    "Presentation"
  abstract:
    "<p>Have you ever asked yourself why we only free monads? Turns out there are a lot of other structures
    that want to be liberated from the constraints of their existence! In this talk we will investigate
    what other poor (algebraic) structures we can free from the dirty hands of imperative programmers.</p>"
  description:
    "<p>Have you ever asked yourself why we only free monads? Turns out there are a lot of other structures that
    want to be liberated from the constraints of their existence! In this talk we will investigate what other
    poor (algebraic) structures we can free from the dirty hands of imperative programmers.</p>

    <p>Our journey starts with the well known Free Monads, but after that we will have a look at all the
    other interesting structures that can be freed and of course we will also look at what we can do with them.</p>

    <p>Knowledge of type classes like Monads, Applicatives and Functors is beneficial but not required. </p>"
  speakers:
  -
    name:
      "Markus Hauck"
    bio:
      "<p>Markus Hauck is an IT Consultant/Scala Hacker/Scala Trainer at codecentric AG in Germany. He loves
      functional programming and languages with powerful type systems. His favorite member of One Direction is
      Liam, because… well that is the member at index 1, which was randomly chosen using a RNG. </p>"
    image:
      "hauck.jpg"
    twitter:
      "markus1189"

- page_name:
    "host_winje"
  title:
    "Lambda Calculus Beep Boop"
  type:
    "Presentation"
  abstract:
    "<p>We present beep boop, a representation for lambda calculus terms inspired by sound. It is a humane
    alternative to de Bruijn notation. It is much easier to utter a sequence of symbols in beep boop than
    in traditional lambda-based representations. Pretty useful for humans! </p>"
  description:
    "<p>We know that we can represent all kinds of things in lambda calculus, including sophisticated data
    structures such as booleans, integers, and lists, but what about the representation of the lambda calculus
    terms themselves? Different representations have different strengths and weaknesses. In this talk we present
    beep boop, a novel representation for lambda calculus terms inspired by sound. It is derived from and shares
    many properties with de Bruijn notation, but offers a more humane interface to calculation. For instance, it
    is much easier for a human to pronounce a sequence of symbols in beep boop (effectively sounds) than in
    traditional lambda-based representations. This opens up exciting new possibilities that we’ll explore in
    this talk. </p>"
  speakers:
  -
    name:
      "Einar W. Høst"
    bio:
      "<p>Einar W. Høst is a computer at NRK, the Norwegian public broadcaster. His heretic views include
      thinking before programming and making drawings to understand things better. This arrogant mindset no
      doubt stems from the idle years spent obtaining a PhD in Computer Science from the University of Oslo. </p>"
    image:
      "host.jpg"
    twitter:
      "einarwh"

